[project]
name = "fastapi-template"
version = "1.0.0"
description = "A modern, production-ready FastAPI template with clean architecture"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "fastapi>=0.119.1",
    "uvicorn[standard]>=0.38.0",
    "sqlalchemy>=2.0.44",
    "psycopg2-binary>=2.9.11",
    "python-dotenv>=1.1.1",
    "pydantic-settings>=2.11.0",
    "pydantic>=2.12.3",
]

[project.optional-dependencies]
dev = [
    "black>=25.9.0",
    "isort>=7.0.0",
    "pre-commit>=4.3.0",
    "ruff>=0.14.1",
]

[tool.black]
line-length = 120
target-version = ['py312']

[tool.isort]
profile = "black"
line_length = 120

[tool.ruff]
line-length = 120
target-version = "py312"

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105", "S106", "S107",
    # Ignore complexity
    "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]

[tool.ruff.lint.isort]
known-first-party = ["app"]

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]
# Examples and scripts can print
"scripts/**/*" = ["T201"]
"examples/**/*" = ["T201"]
